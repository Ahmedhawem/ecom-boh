// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(BUYER)
  phone     String?
  address   String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products     Product[]
  reviews      Review[]
  orders       Order[]
  sentMessages     ContactMessage[] @relation("SenderMessages")
  receivedMessages ContactMessage[] @relation("ReceiverMessages")

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Decimal  @db.Decimal(10, 2)
  images      String[] // Array of image URLs
  categoryId  String
  sellerId    String
  isApproved  Boolean  @default(false)
  isActive    Boolean  @default(true)
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id])
  seller   User     @relation(fields: [sellerId], references: [id])
  reviews  Review[]
  orders   Order[]

  @@map("products")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comment   String?
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@map("reviews")
}

model Order {
  id        String      @id @default(cuid())
  productId String
  buyerId   String
  quantity  Int
  totalPrice Decimal    @db.Decimal(10, 2)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])
  buyer   User    @relation(fields: [buyerId], references: [id])

  @@map("orders")
}

model ContactMessage {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  subject     String
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sender   User @relation("SenderMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceiverMessages", fields: [receiverId], references: [id])

  @@map("contact_messages")
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
} 